(* -------------------------------------------------------------------------- *
 *                     Vellvm - the Verified LLVM project                     *
 *                                                                            *
 *     Copyright (c) 2017 Steve Zdancewic <stevez@cis.upenn.edu>              *
 *                                                                            *
 *   This file is distributed under the terms of the GNU General Public       *
 *   License as published by the Free Software Foundation, either version     *
 *   3 of the License, or (at your option) any later version.                 *
 ---------------------------------------------------------------------------- *)

Require Import ZArith List String Omega.
Require Import Vellvm.Classes Vellvm.Util Vellvm.Trace.
Require Import Oat.AST Vellvm.DynamicValues.

Set Implicit Arguments.
Set Contextual Implicit.

Module Type ADDR.
  Parameter addr : Set.
  Parameter null : addr.
  Parameter eq_dec : forall (x y: addr), {x = y} + {~ x = y}.
End ADDR.  

Module DVALUE(A:ADDR).
       
(* The set of dynamic values manipulated by an OAT program. *)
Inductive dvalue : Set :=
| DVALUE_Addr (a:A.addr)
| DVALUE_Bool (x:bool)
| DVALUE_I64 (x:int64)
| DVALUE_Null
| DVALUE_Struct  (fields: list (id * dvalue))
| DVALUE_Array   (elts: list dvalue).

Inductive IO : Type -> Type :=
| Alloca : IO dvalue
| Load   : forall (a:dvalue), (IO dvalue)
| Store  : forall (a:dvalue) (v:dvalue), (IO unit)
.    

(* Trace of events generated by a computation. *)
Definition Trace X := M IO X.
Instance functor_trace : Functor Trace := (@mapM IO).
Instance monad_trace : (@Monad Trace) (@mapM IO) := { mret X x := Ret x; mbind := @bindM IO }.
Instance exn_trace : (@ExceptionMonad string Trace _ _) := fun _ s => Err s.

(* Trace Utilities ---------------------------------------------------------- *)

(* Lift the error monad into the trace monad. *)
Definition lift_err_d {A X} (m:err A) (f: A -> Trace X) : Trace X :=
  match m with
  | inl s => raise s
  | inr b => f b
  end.

Notation "'do' x <- m ; f" := (lift_err_d m (fun x => f)) 
                               (at level 200, x ident, m at level 100, f at level 200).

End DVALUE.